# Reorder variables
df_total <- df[, c(1, 4, 2, 3, 5)]
View(df_total)
# Reorder variables
df_total = df[, c(1, 4, 2, 3, 5)]
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df$GDP)
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
df_per_sector = merge(per_sector_emissions, gdp, by = "Country Code", all = TRUE)
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emisssions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge GDP and Emissions data. I kept non matching entries which have to be checked if the country code is wrong
df_total = merge(total_emissions, gdp, by = "Country Code", all = TRUE)
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = TRUE)
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("country code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "country code", "2020")]
gdp = gdp[c("Country Name", "Country Code", "2020")]
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = TRUE)
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge GDP and Emissions data. I kept non matching entries which have to be checked if the country code is wrong
df_total = merge(total_emissions, gdp, by = "Country Code", all = TRUE)
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
gdp = gdp[c("Country Name", "Country Code", "2020")]
View(gdp)
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge per sector and GDP
names(gdp)[names(gdp) == "Country Code"] <- "country code"
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = TRUE)
View(df_per_sector)
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = F)
write.csv(df_per_sector, data_path)
write.csv(df_per_sector, file = "", data_path)
filename_per_sector_gdp = paste(data_path, "per_sector_emissions_gdp", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
filename_per_sector_gdp = paste(data_path, "per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
gdp = gdp[c("Country Code", "GDP")]
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge GDP and Emissions data. I kept non matching entries which have to be checked if the country code is wrong
df_total = merge(total_emissions, gdp, by = "Country Code", all = TRUE)
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
gdp = gdp[c("Country Code", "GDP")]
names(gdp)[names(gdp) == "Country Code"] <- "country code"
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = F)
filename_per_sector_gdp = paste(data_path, "per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
filename_per_sector_gdp = paste(data_path, "/output/per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
filename_per_sector_gdp = paste(data_path, "/output/per_sector_emissions_gdp2.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
filename_per_sector_gdp = paste(data_path, "/output/per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
pairs(df_per_sector)
pairs(df_per_sector[,3:])
df_per_sector[,3:]
df_per_sector[,3]
pairs(df_per_sector[,-1])
pairs(df_per_sector[,c(-1,-2)])
pairs(df_per_sector[,c(-1,-2)])
# Merge per sector and GDP
gdp = gdp[c("Country Code", "GDP")]
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge GDP and Emissions data. I kept non matching entries which have to be checked if the country code is wrong
df_total = merge(total_emissions, gdp, by = "Country Code", all = TRUE)
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
gdp = gdp[c("Country Code", "GDP")]
names(gdp)[names(gdp) == "Country Code"] <- "country code"
gdp$GDP = as.numeric(gdp$GDP)
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = F)
filename_per_sector_gdp = paste(data_path, "/output/per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
pairs(df_per_sector[,c(-1,-2)])
filename_data = paste(data_path, "data", sep = "")
data = read_excel(data)
#install.packages("reshape")
library(readxl)
library(reshape)
# Path to the data, which is universal for us
data_path = paste(dirname(getwd()), "/data/", sep = "")
# Filename of the data
filename_emissions = paste(data_path, "climatetrace_emissions_by_subsector_timeseries_interval_year_since_2020_to_2020.csv", sep = "")
# Loading the Climate Trace Emissions data that Charles put into the WhattsApp Group
emissions = read.csv(filename_emissions,sep = ",", header = TRUE)
# Aggregating Emissions over each Country
total_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full), FUN = sum, na.rm = TRUE)
# Renaming variables
colnames(total_emissions) = c("Country Code","Emissions Data Country Name", "Emissions")
# Emissions per sector
per_sector_emissions = aggregate(emissions[,1], by = list(emissions$country, emissions$country_full, emissions$sector), FUN = sum, na.rm = T)
colnames(per_sector_emissions) = c("country code","country name", "sector", "emissions")
per_sector_emissions = reshape(per_sector_emissions, idvar = c("country code", "country name") , timevar = "sector", direction = "wide")
per_sector_emissions$emissions.total = total_emissions$Emissions
# Reading the GDP Excel Sheet from https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?end=2021&start=1960
filename_gdp = paste(data_path, "GDP_worldbank.xls", sep = "")
gdp = read_excel(filename_gdp)
# Renaming variables to the correct names in the third row
colnames(gdp) = gdp[3,]
# Drop the first three irrelevant rows
gdp = gdp[-(1:3),]
# Drop all irrelevant variables
gdp = gdp[c("Country Name", "Country Code", "2020")]
# Rename the 2020 GDP variable simply to GDP
names(gdp)[names(gdp) == "2020"] <- "GDP"
# Merge GDP and Emissions data. I kept non matching entries which have to be checked if the country code is wrong
df_total = merge(total_emissions, gdp, by = "Country Code", all = TRUE)
# Reorder variables
df_total = df_total[, c(1, 4, 2, 3, 5)]
# Calculate Emissions per GDP
df_total$GDP = as.numeric(df_total$GDP)
df_total$Emissions_per_GDP = df_total$Emissions / df_total$GDP
# Merge per sector and GDP
gdp = gdp[c("Country Code", "GDP")]
names(gdp)[names(gdp) == "Country Code"] <- "country code"
gdp$GDP = as.numeric(gdp$GDP)
df_per_sector = merge(per_sector_emissions, gdp, by = "country code", all = F)
filename_per_sector_gdp = paste(data_path, "/output/per_sector_emissions_gdp.csv", sep = "")
write.csv(df_per_sector, file = filename_per_sector_gdp)
pairs(df_per_sector[,c(-1,-2)])
filename_data = paste(data_path, "data", sep = "")
data = read_excel(data)
filename_data = paste(data_path, "data", sep = "")
data = read_excel(filename_data)
filename_data = paste(data_path, "data", sep = "")
data = read(filename_data)
filename_data = paste(data_path, "data.csv", sep = "")
data = read.csv(filename_data)
View(data)
install.packages("HSAUR2")
library(HSAUR2)
data <- HSAUR2::USairpollution
clear all
rm(list = ls())
data <- HSAUR2::USairpollution
View(data)
summary(data$SO2)
quantile(data$SO2)
quantile(data$SO2, probs = c(0.33,0.5,0.67))
ifelse(data$SO2 < 14.4, data$pollution_group <- 1, data$pollution_group <- 2)
ifelse(data$SO2[] < 14.4, data$pollution_group <- 1, data$pollution_group <- 2)
data$pollution_group <- ifelse(data$SO2[] < 14.4, data$pollution_group <- 1, data$pollution_group <- 2)
data$pollution_group <- ifelse(data$SO2[] < 14.4, 1, 2)
data$pollution_group <- ifelse(data$SO2[] > 29.8, 3)
data$pollution_group <- ifelse(data$SO2[] > 29.8, 3, no)
data$pollution_group <- if(data$SO2[] > 29.8) 3
data$pollution_group <- ifelse(data$SO2 < 14.4, 1, 2)
data$pollution_group <- ifelse(data$SO2 < 26.0, 1, 2)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = SO2)) +
geom_point(aes(colour = group), data = data)
#install.packages("HSAUR2")
library("ggplot2")
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = SO2)) +
geom_point(aes(colour = group), data = data)
plot1
plot1 = ggplot(mapping = aes(x = wind, y = SO2)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
plot1 = ggplot(mapping = aes(x = manu, y = SO2)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
plot1 = ggplot(mapping = aes(x = manu, y = wind)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# classify data into pollution_group = 1 (low pollution) and pollution_group = 2 (high polution)
data$pollution_group <- ifelse(data$SO2 < 26.0, 1, 2)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = precip)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = manu, y = precip)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = popul, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = precip, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = precip, y = predays)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = temp, y = predays)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = temp, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
polllution_lda = lda(pollution_group ~ wind + manu, data = data)
library(MASS)
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
# classify data into pollution_group = 1 (low pollution) and pollution_group = 2 (high polution)
data$pollution_group <- ifelse(data$SO2 < 26.0, 1, 2)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
polllution_lda = lda(pollution_group ~ wind + manu, data = data)
polllution_lda
polllution_lda.values <- predict(polllution_lda)
col <- as.numeric(data$pollution_group)
plot(polllution_lda.values$x[,1:2],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
plot(polllution_lda.values$x[1:2,],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
# classify data into pollution_group = 1 (low pollution) and pollution_group = 2 (high polution)
data$pollution_group <- ifelse(data$SO2 < 26.0, 1, 2)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
polllution_lda = lda(pollution_group ~ wind + manu, data = data)
polllution_lda
polllution_lda.values <- predict(polllution_lda)
col <- as.numeric(data$pollution_group)
plot(polllution_lda.values$x[1:2,],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
plot(polllution_lda.values$x[,1],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
############################################
# 1 - Create classes of pollution
############################################
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
# classify data into pollution_group = 1 (low pollution) and pollution_group = 2 (high polution)
data$pollution_group <- ifelse(data$SO2 < 14.4, 1, 2)
if (data$SO2 > 29.8) data$pollution_group <- 3
if (data$SO2 > 29.8) data$pollution_group == 3
if (data$SO2[] > 29.8) data$pollution_group == 3
if (data$SO2 > 29.8) data$pollution_group == 3
data$pollution_group <- ifelse(data$SO2 > 29.8, 3,  data$pollution_group)
#install.packages("HSAUR2")
############################################
# 0 - setup: install packages, get data
############################################
rm(list = ls())
library("HSAUR2")
library("ggplot2")
library("MASS")
data <- HSAUR2::USairpollution
############################################
# 1 - Create classes of pollution
############################################
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
# classify data into pollution_group = 1 (low pollution), 2 (medium pollution) and 3 (high pollution)
data$pollution_group <- ifelse(data$SO2 < 14.4, 1, 2)
data$pollution_group <- ifelse(data$SO2 > 29.8, 3,  data$pollution_group)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
polllution_lda = lda(pollution_group ~ wind + manu, data = data)
polllution_lda
polllution_lda.values <- predict(polllution_lda)
col <- as.numeric(data$pollution_group)
plot(polllution_lda.values$x[,1:2],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
View(data)
############################################
# 1 - Create classes of pollution
############################################
# drop outliers: Chicago
data <- data[-c("Chicago"),]
############################################
# 1 - Create classes of pollution
############################################
# drop outliers: Chicago
data <- data[-"Chicago",]
data <- data[-7,]
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
#install.packages("HSAUR2")
############################################
# 0 - setup: install packages, get data
############################################
rm(list = ls())
library("HSAUR2")
library("ggplot2")
library("MASS")
data <- HSAUR2::USairpollution
############################################
# 1 - Create classes of pollution
############################################
# drop outliers: Chicago
data <- data[-7,]
# get quantiles of air pollution
quantile(data$SO2, probs = c(0.33,0.5,0.67))
# classify data into pollution_group = 1 (low pollution), 2 (medium pollution) and 3 (high pollution)
data$pollution_group <- ifelse(data$SO2 < 14.0, 1, 2)
data$pollution_group <- ifelse(data$SO2 > 29.13, 3,  data$pollution_group)
# plot data and classes
plot1 = ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
polllution_lda = lda(pollution_group ~ wind + manu, data = data)
polllution_lda
polllution_lda.values <- predict(polllution_lda)
col <- as.numeric(data$pollution_group)
plot(polllution_lda.values$x[,1:2],col=col,xlab='Linear discriminant 1',
ylab='Linear discriminant 2',cex.lab=1.5)
# plot data and classes
plot1 <- ggplot(mapping = aes(x = wind, y = manu)) +
geom_point(aes(colour = pollution_group), data = data)
plot1
